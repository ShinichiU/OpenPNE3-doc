=========================================
OpenPNE3 セキュアコーディングガイドライン
=========================================

目次
====

.. contents::

概要
====

このドキュメントは、セキュリティを前提としたコーディングをおこなうために従うべきガイドラインを、 OpenPNE3 に貢献する個人またはチームに示すためのものです。

ユーザをなりすましから守る
==========================

セッション管理
--------------

ブルートフォースアタックを回避する
----------------------------------

パスワードの再確認
------------------

パスワード文字列生成のヒント
----------------------------

正しく入力値を検証する
======================

サーバサイドでの入力値検証
--------------------------

ホワイトリストやブラックリストの利用
++++++++++++++++++++++++++++++++++++

Null Byte Attack による制限の回避への対策
+++++++++++++++++++++++++++++++++++++++++

クライアントサイドでの入力値検証
--------------------------------

安全に HTML レスポンスを生成する
================================

XSS (Cross Site Scripting) 脆弱性
---------------------------------

XSS とは、攻撃者がウェブページに任意のコード (多くの場合は JavaScript) を挿入することのできる脆弱性です。

挿入されたコードは被害者のブラウザ上で実行されます。そのため、そのサイトにおいてクライアントがおこなうことのできる操作のほとんどを実行させることができます。

この脆弱性は、ユーザ入力値などの信頼できないデータを含む Web ページを動的に生成する際に、たとえば、その入力値が直接 HTML の構造に作用してしまう形で埋め込んだ場合などに発生します。

たとえば、以下のサンプルコードでは、 GET パラメータの name の値を HTML の一部として出力しています::

  <?php echo '<p>Hello, '.$_GET['name'].'!</p>';

このソースコードは、 `http://example.com/?name=Ebihara` のようにアクセスした場合に、以下のように出力されることを意図したものです::

  <p>Hello, Ebihara!</p>

しかし、 `http://example.com/?name=<strong>Ebihara</strong>` のようにして、入力値に HTML タグを含めてしまうと、この HTML がそのまま出力に挿入されてしまいます。これは、任意のスクリプトを挿入可能な状態にあるということを意味します::

  <p>Hello, <strong>Ebihara</strong>!</p>

HTML タグをそのまま反映させることを意図しているのでない限り、本来は以下のように出力されなければなりません::

  <p>Hello, &lt;strong&gt;Ebihara&lt;/strong&gt;!</p>

この例のように HTML にユーザ入力値を埋め込む場合の XSS への対策方法はよく知られていますが、動的に生成する JavaScript や画像、 Flash などの Web ブラウザが実行可能なコンテンツすべてについても、この脆弱性への対策を施す必要があります。

XSS による脅威
--------------

JavaScript などによってユーザのブラウザが実行可能なほとんどの操作をおこなうことができます。

もし XSS に脆弱であれば、マルウェアの配布サイトにユーザを連れて行ったり、ページ上に表示されている機密情報を流出させたりといったことができます。セッションクッキーを盗むこともできるので、攻撃者はユーザになりすましてログインすることもできます。

また、フィッシングの手口と組み合わせることで、攻撃者にユーザのパスワードを知られてしまう危険性が向上します。

非常に緊急度の高い脆弱性ですので、発覚してしまった場合は即座に対策を施すべきです。

HTML の生成
-----------

HTML の利用を制限したい入力値にある HTML 特殊文字 (&, <, >, ", ') を、出力時にエスケープする必要があります。

特殊文字が文字参照になるように適切にエスケープが施されていれば、特殊文字を利用して HTML の要素の内容に埋め込まれた入力値から HTML の構造を変更させることで XSS 攻撃を成立させることはできなくなります。

symfony のアクションを通じてテンプレートに渡された値は、明示的に無効にしていない限り、この文字参照へのエスケープの処理が自動的におこなわれます。

たとえば、以下のようなアクションを考えます::

  <?php
  
  class exampleActions extends sfActions
  {
    public function executeIndex(sfWebRequest $request)
    {
      $this->name = $request['name'];
    }
  }

アクションの $name プロパティに値を代入したことで、この $name の値をテンプレートから参照できるようになりました。

このときのリクエストパラメータ name の値が `<strong>Ebihara</strong>` だったとして、以下のようにしてテンプレートから出力しても、結果は正しくエスケープされた状態になります::

  <p>Hello, <?php echo $name ?>!</p>
  /* Output: <p>Hello, &lt;strong&gt;Ebihara&lt;/strong&gt;!</p> */

実はテンプレートからアクセスできる $name の値は、エスケープ済みの文字列というわけではありません。 symfony のアクションを介してテンプレートに変数をアサインすると、その変数の値は sfOutputEscaper でラッピングされます。ですので、アクションからテンプレートに渡された変数は、特別に許可された一部のクラスインスタンスを除き、実際には sfOutputEscaper およびその派生クラスのインスタンスになります。 sfOutputEscaper についての詳細は symfony の http://www.symfony-project.org/gentle-introduction/1_4/en/07-Inside-the-View-Layer#chapter_07_output_escaping を参照してください。

sfOutputEscaper のインスタンスは、アクションから渡された生の値を保持しており、 echo や . 演算子、関数などにより文字列として扱われると、保持している生の値をエスケープして返します。

これにより変数内の HTML 特殊文字のエスケープは適切におこなわれるようになりましたが、 HTML 属性値としてユーザ入力値を出力しようとする際に脆弱になることがあります::

  <p id=<?php echo $name ?>>Hello, <?php echo $name ?>!</p>

このとき $name の生の文字列が `Ebihara onmouseover=alert(0);` だった場合、以下のように p 要素の属性値が追加されてしまい、マウスカーソルを合わせるとスクリプトが実行されてしまいます::

  <p id=Ebihara onmouseover=alert(0);>Hello, Ebihara onmouseover=alert(0);!</p>

" や ' は sfOutputEscaper によってエスケープされるので、このようなケースでは、以下のように属性値を引用符で囲うことで、属性値を超えて入力値が反映されることはなくなります::

  <p id="Ebihara onmouseover=alert(0);">Hello, Ebihara onmouseover=alert(0);!</p>

引用符は ' でも構いませんが、 PHP において HTML 特殊文字のエスケープに用いられる htmlspecialchars() 関数は、第二引数に ENT_QUOTES を与えない限り ' をエスケープしないため、 ' がエスケープされていない状態の入力値が ' で囲まれた属性値として埋め込まれた場合に脆弱になります。 OpenPNE のデフォルト設定では sfOutputEscaper は ENT_QUOTES つきで htmlspecialchars() をコールしますが、原則として引用符には " を使用するべきです。

ただし、この対策をしても以下のような場合は依然として脆弱なことがあるので注意してください (対策方法は後述します)::

 * イベントハンドラを記述するような属性値 (onclick や onmouseover など) に入力値を埋め込む場合
 * 任意の要素の style 属性値
 * a 要素の href 属性値に入力値を埋め込む場合
 * img 要素の src 属性値に入力値を埋め込む場合

JavaScript の生成
-----------------

CSS の生成
----------

画像の生成
----------

文脈にあったエスケープを心がける
--------------------------------

安全に SQL を生成する
=====================

安全に外部コマンドを実行する
============================

意図しないファイルへのアクセスを防ぐ
====================================

SNS 内情報を安全な形で保存する
==============================

アクセス権限の制限の回避を防ぐ
==============================

CSRF (Cross Site Request Forgries) 脆弱性
-----------------------------------------

フォームにおける対策
++++++++++++++++++++

アクション内での対策
++++++++++++++++++++

Ajax リクエストにおける対策
+++++++++++++++++++++++++++

アクションで認証を要求する
--------------------------

権限チェックの漏れを防ぐ
------------------------
